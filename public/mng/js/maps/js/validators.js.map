{"version":3,"sources":["validators.js"],"names":["global","factory","exports","module","define","amd","validator","this","assertString","input","TypeError","toDate","date","Date","parse","isNaN","toFloat","str","parseFloat","toInt","radix","parseInt","toBoolean","strict","equals","comparison","toString","babelHelpers","length","String","contains","elem","indexOf","matches","pattern","modifiers","Object","prototype","call","RegExp","test","merge","obj","arguments","undefined","defaults","key","isByteLength","options","min","max","len","encodeURI","split","isFDQN","default_fqdn_options","allow_trailing_dot","substring","parts","require_tld","tld","pop","part","i","allow_underscores","replace","isEmail","default_email_options","allow_display_name","display_email","match","displayName","domain","user","join","lower_domain","toLowerCase","slice","allow_utf8_local_part","quotedEmailUserUtf8","quotedEmailUser","emailUserUtf8Part","emailUserPart","user_parts","isIP","version","ipv4Maybe","sort","a","b","blocks","foundOmissionBlock","foundIPv4TransitionBlock","expectedNumberOfBlocks","substr","shift","ipv6Block","isURL","url","default_url_options","protocol","auth","host","hostname","port","port_str","require_valid_protocol","protocols","require_protocol","allow_protocol_relative_urls","host_whitelist","host_blacklist","isMACAddress","macAddress","isBoolean","isAlpha","locale","alpha","Error","isAlphanumeric","alphanumeric","isNumeric","numeric","isLowercase","isUppercase","toUpperCase","isAscii","ascii","isFullWidth","fullWidth","isHalfWidth","halfWidth","isVariableWidth","isMultibyte","multibyte","isSurrogatePair","surrogatePair","isInt","int","hasOwnProperty","isFloat","float","isDecimal","decimal","isHexadecimal","hexadecimal","isDivisibleBy","num","isHexColor","hexcolor","isJSON","JSON","e","isNull","isLength","surrogatePairs","isUUID","uuid","isMongoId","isISO8601","iso8601","getTimezoneOffset","iso8601Parts","timezone","sign","hours","minutes","offset","isDate","normalizedDate","timezoneOffset","timezoneDifference","getTime","day","getDate","dayOrYear","dayOrYearMatches","year","map","digitString","getFullYear","isAfter","original","isBefore","isIn","array","isCreditCard","sanitized","creditCard","sum","digit","tmpNum","shouldDouble","isISIN","isin","checksumStr","character","isISBN","checksum","isbn10Maybe","charAt","isbn13Maybe","factor","isMobilePhone","phones","currencyRegex","symbol","require_symbol","negative","whole_dollar_amount_without_sep","whole_dollar_amount_with_sep","thousands_separator","valid_whole_dollar_amounts","whole_dollar_amount","decimal_amount","decimal_separator","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","isCurrency","default_currency_options","isBase64","notBase64","firstPaddingChar","isDataURI","dataURI","ltrim","chars","rtrim","trim","escape","unescape","blacklist","stripLow","keep_new_lines","whitelist","isWhitelisted","normalizeEmail","email","default_normalize_email_options","remove_extension","remove_dots","lowercase","Symbol","iterator","constructor","en-US","cs-CZ","de-DE","es-ES","fr-FR","nl-NL","pl-PL","pt-PT","ru-RU","tr-TR","ar","englishLocales","_locale","arabicLocales","_i","3","4","5","all","ar-SY","el-GR","en-AU","en-GB","en-HK","en-IN","en-NZ","en-ZA","en-ZM","fi-FI","ms-MY","nb-NO","nn-NO","pt-BR","vi-VN","zh-CN","zh-TW","isFQDN","isLoginId","re","isPassword"],"mappings":"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","file":"validators.js","sourcesContent":["/*!\r\n * Copyright (c) 2016 Chris O'Hara <cohara87@gmail.com>\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining\r\n * a copy of this software and associated documentation files (the\r\n * \"Software\"), to deal in the Software without restriction, including\r\n * without limitation the rights to use, copy, modify, merge, publish,\r\n * distribute, sublicense, and/or sell copies of the Software, and to\r\n * permit persons to whom the Software is furnished to do so, subject to\r\n * the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be\r\n * included in all copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\r\n * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\r\n * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\r\n * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n(function (global, factory) {\r\n      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n      typeof define === 'function' && define.amd ? define(factory) :\r\n      (global.validator = factory());\r\n}(this, function () { 'use strict';\r\n\r\n      var babelHelpers = {};\r\n      babelHelpers.typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\r\n        return typeof obj;\r\n      } : function (obj) {\r\n        return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\r\n      };\r\n      babelHelpers;\r\n\r\n      function assertString(input) {\r\n        if (typeof input !== 'string') {\r\n          throw new TypeError('This library (validator.js) validates strings only');\r\n        }\r\n      }\r\n\r\n      function toDate(date) {\r\n        assertString(date);\r\n        date = Date.parse(date);\r\n        return !isNaN(date) ? new Date(date) : null;\r\n      }\r\n\r\n      function toFloat(str) {\r\n        assertString(str);\r\n        return parseFloat(str);\r\n      }\r\n\r\n      function toInt(str, radix) {\r\n        assertString(str);\r\n        return parseInt(str, radix || 10);\r\n      }\r\n\r\n      function toBoolean(str, strict) {\r\n        assertString(str);\r\n        if (strict) {\r\n          return str === '1' || str === 'true';\r\n        }\r\n        return str !== '0' && str !== 'false' && str !== '';\r\n      }\r\n\r\n      function equals(str, comparison) {\r\n        assertString(str);\r\n        return str === comparison;\r\n      }\r\n\r\n      function toString(input) {\r\n        if ((typeof input === 'undefined' ? 'undefined' : babelHelpers.typeof(input)) === 'object' && input !== null) {\r\n          if (typeof input.toString === 'function') {\r\n            input = input.toString();\r\n          } else {\r\n            input = '[object Object]';\r\n          }\r\n        } else if (input === null || typeof input === 'undefined' || isNaN(input) && !input.length) {\r\n          input = '';\r\n        }\r\n        return String(input);\r\n      }\r\n\r\n      function contains(str, elem) {\r\n        assertString(str);\r\n        return str.indexOf(toString(elem)) >= 0;\r\n      }\r\n\r\n      function matches(str, pattern, modifiers) {\r\n        assertString(str);\r\n        if (Object.prototype.toString.call(pattern) !== '[object RegExp]') {\r\n          pattern = new RegExp(pattern, modifiers);\r\n        }\r\n        return pattern.test(str);\r\n      }\r\n\r\n      function merge() {\r\n        var obj = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\r\n        var defaults = arguments[1];\r\n\r\n        for (var key in defaults) {\r\n          if (typeof obj[key] === 'undefined') {\r\n            obj[key] = defaults[key];\r\n          }\r\n        }\r\n        return obj;\r\n      }\r\n\r\n      /* eslint-disable prefer-rest-params */\r\n      function isByteLength(str, options) {\r\n        assertString(str);\r\n        var min = void 0;\r\n        var max = void 0;\r\n        if ((typeof options === 'undefined' ? 'undefined' : babelHelpers.typeof(options)) === 'object') {\r\n          min = options.min || 0;\r\n          max = options.max;\r\n        } else {\r\n          // backwards compatibility: isByteLength(str, min [, max])\r\n          min = arguments[1];\r\n          max = arguments[2];\r\n        }\r\n        var len = encodeURI(str).split(/%..|./).length - 1;\r\n        return len >= min && (typeof max === 'undefined' || len <= max);\r\n      }\r\n\r\n      var default_fqdn_options = {\r\n        require_tld: true,\r\n        allow_underscores: false,\r\n        allow_trailing_dot: false\r\n      };\r\n\r\n      function isFDQN(str, options) {\r\n        assertString(str);\r\n        options = merge(options, default_fqdn_options);\r\n\r\n        /* Remove the optional trailing dot before checking validity */\r\n        if (options.allow_trailing_dot && str[str.length - 1] === '.') {\r\n          str = str.substring(0, str.length - 1);\r\n        }\r\n        var parts = str.split('.');\r\n        if (options.require_tld) {\r\n          var tld = parts.pop();\r\n          if (!parts.length || !/^([a-z\\u00a1-\\uffff]{2,}|xn[a-z0-9-]{2,})$/i.test(tld)) {\r\n            return false;\r\n          }\r\n        }\r\n        for (var part, i = 0; i < parts.length; i++) {\r\n          part = parts[i];\r\n          if (options.allow_underscores) {\r\n            part = part.replace(/_/g, '');\r\n          }\r\n          if (!/^[a-z\\u00a1-\\uffff0-9-]+$/i.test(part)) {\r\n            return false;\r\n          }\r\n          if (/[\\uff01-\\uff5e]/.test(part)) {\r\n            // disallow full-width chars\r\n            return false;\r\n          }\r\n          if (part[0] === '-' || part[part.length - 1] === '-') {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      var default_email_options = {\r\n        allow_display_name: false,\r\n        allow_utf8_local_part: true,\r\n        require_tld: true\r\n      };\r\n\r\n      /* eslint-disable max-len */\r\n      var displayName = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\.\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF\\s]*<(.+)>$/i;\r\n      var emailUserPart = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]+$/i;\r\n      var quotedEmailUser = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]))*$/i;\r\n      var emailUserUtf8Part = /^[a-z\\d!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+$/i;\r\n      var quotedEmailUserUtf8 = /^([\\s\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f\\x21\\x23-\\x5b\\x5d-\\x7e\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]|(\\\\[\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))*$/i;\r\n      /* eslint-enable max-len */\r\n\r\n      function isEmail(str, options) {\r\n        assertString(str);\r\n        options = merge(options, default_email_options);\r\n\r\n        if (options.allow_display_name) {\r\n          var display_email = str.match(displayName);\r\n          if (display_email) {\r\n            str = display_email[1];\r\n          }\r\n        }\r\n\r\n        var parts = str.split('@');\r\n        var domain = parts.pop();\r\n        var user = parts.join('@');\r\n\r\n        var lower_domain = domain.toLowerCase();\r\n        if (lower_domain === 'gmail.com' || lower_domain === 'googlemail.com') {\r\n          user = user.replace(/\\./g, '').toLowerCase();\r\n        }\r\n\r\n        if (!isByteLength(user, { max: 64 }) || !isByteLength(domain, { max: 256 })) {\r\n          return false;\r\n        }\r\n\r\n        if (!isFDQN(domain, { require_tld: options.require_tld })) {\r\n          return false;\r\n        }\r\n\r\n        if (user[0] === '\"') {\r\n          user = user.slice(1, user.length - 1);\r\n          return options.allow_utf8_local_part ? quotedEmailUserUtf8.test(user) : quotedEmailUser.test(user);\r\n        }\r\n\r\n        var pattern = options.allow_utf8_local_part ? emailUserUtf8Part : emailUserPart;\r\n\r\n        var user_parts = user.split('.');\r\n        for (var i = 0; i < user_parts.length; i++) {\r\n          if (!pattern.test(user_parts[i])) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n      }\r\n\r\n      var ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\r\n      var ipv6Block = /^[0-9A-F]{1,4}$/i;\r\n\r\n      function isIP(str) {\r\n        var version = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\r\n\r\n        assertString(str);\r\n        version = String(version);\r\n        if (!version) {\r\n          return isIP(str, 4) || isIP(str, 6);\r\n        } else if (version === '4') {\r\n          if (!ipv4Maybe.test(str)) {\r\n            return false;\r\n          }\r\n          var parts = str.split('.').sort(function (a, b) {\r\n            return a - b;\r\n          });\r\n          return parts[3] <= 255;\r\n        } else if (version === '6') {\r\n          var blocks = str.split(':');\r\n          var foundOmissionBlock = false; // marker to indicate ::\r\n\r\n          // At least some OS accept the last 32 bits of an IPv6 address\r\n          // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\r\n          // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\r\n          // and '::a.b.c.d' is deprecated, but also valid.\r\n          var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\r\n          var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\r\n\r\n          if (blocks.length > expectedNumberOfBlocks) {\r\n            return false;\r\n          }\r\n          // initial or final ::\r\n          if (str === '::') {\r\n            return true;\r\n          } else if (str.substr(0, 2) === '::') {\r\n            blocks.shift();\r\n            blocks.shift();\r\n            foundOmissionBlock = true;\r\n          } else if (str.substr(str.length - 2) === '::') {\r\n            blocks.pop();\r\n            blocks.pop();\r\n            foundOmissionBlock = true;\r\n          }\r\n\r\n          for (var i = 0; i < blocks.length; ++i) {\r\n            // test for a :: which can not be at the string start/end\r\n            // since those cases have been handled above\r\n            if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\r\n              if (foundOmissionBlock) {\r\n                return false; // multiple :: in address\r\n              }\r\n              foundOmissionBlock = true;\r\n            } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\r\n              // it has been checked before that the last\r\n              // block is a valid IPv4 address\r\n            } else if (!ipv6Block.test(blocks[i])) {\r\n                return false;\r\n              }\r\n          }\r\n          if (foundOmissionBlock) {\r\n            return blocks.length >= 1;\r\n          }\r\n          return blocks.length === expectedNumberOfBlocks;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      var default_url_options = {\r\n        protocols: ['http', 'https', 'ftp'],\r\n        require_tld: true,\r\n        require_protocol: false,\r\n        require_valid_protocol: true,\r\n        allow_underscores: false,\r\n        allow_trailing_dot: false,\r\n        allow_protocol_relative_urls: false\r\n      };\r\n\r\n      function isURL(url, options) {\r\n        assertString(url);\r\n        if (!url || url.length >= 2083 || /\\s/.test(url)) {\r\n          return false;\r\n        }\r\n        if (url.indexOf('mailto:') === 0) {\r\n          return false;\r\n        }\r\n        options = merge(options, default_url_options);\r\n        var protocol = void 0,\r\n            auth = void 0,\r\n            host = void 0,\r\n            hostname = void 0,\r\n            port = void 0,\r\n            port_str = void 0,\r\n            split = void 0;\r\n\r\n        split = url.split('#');\r\n        url = split.shift();\r\n\r\n        split = url.split('?');\r\n        url = split.shift();\r\n\r\n        split = url.split('://');\r\n        if (split.length > 1) {\r\n          protocol = split.shift();\r\n          if (options.require_valid_protocol && options.protocols.indexOf(protocol) === -1) {\r\n            return false;\r\n          }\r\n        } else if (options.require_protocol) {\r\n          return false;\r\n        } else if (options.allow_protocol_relative_urls && url.substr(0, 2) === '//') {\r\n          split[0] = url.substr(2);\r\n        }\r\n        url = split.join('://');\r\n\r\n        split = url.split('/');\r\n        url = split.shift();\r\n        split = url.split('@');\r\n        if (split.length > 1) {\r\n          auth = split.shift();\r\n          if (auth.indexOf(':') >= 0 && auth.split(':').length > 2) {\r\n            return false;\r\n          }\r\n        }\r\n        hostname = split.join('@');\r\n        split = hostname.split(':');\r\n        host = split.shift();\r\n        if (split.length) {\r\n          port_str = split.join(':');\r\n          port = parseInt(port_str, 10);\r\n          if (!/^[0-9]+$/.test(port_str) || port <= 0 || port > 65535) {\r\n            return false;\r\n          }\r\n        }\r\n        if (!isIP(host) && !isFDQN(host, options) && host !== 'localhost') {\r\n          return false;\r\n        }\r\n        if (options.host_whitelist && options.host_whitelist.indexOf(host) === -1) {\r\n          return false;\r\n        }\r\n        if (options.host_blacklist && options.host_blacklist.indexOf(host) !== -1) {\r\n          return false;\r\n        }\r\n        return true;\r\n      }\r\n\r\n      var macAddress = /^([0-9a-fA-F][0-9a-fA-F]:){5}([0-9a-fA-F][0-9a-fA-F])$/;\r\n\r\n      function isMACAddress(str) {\r\n        assertString(str);\r\n        return macAddress.test(str);\r\n      }\r\n\r\n      function isBoolean(str) {\r\n        assertString(str);\r\n        return ['true', 'false', '1', '0'].indexOf(str) >= 0;\r\n      }\r\n\r\n      var alpha = {\r\n        'en-US': /^[A-Z]+$/i,\r\n        'cs-CZ': /^[A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\r\n        'de-DE': /^[A-ZÄÖÜß]+$/i,\r\n        'es-ES': /^[A-ZÁÉÍÑÓÚÜ]+$/i,\r\n        'fr-FR': /^[A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\r\n        'nl-NL': /^[A-ZÉËÏÓÖÜ]+$/i,\r\n        'pl-PL': /^[A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\r\n        'pt-PT': /^[A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,\r\n        'ru-RU': /^[А-ЯЁа-яё]+$/i,\r\n        'tr-TR': /^[A-ZÇĞİıÖŞÜ]+$/i,\r\n        ar: /^[ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/\r\n      };\r\n\r\n      var alphanumeric = {\r\n        'en-US': /^[0-9A-Z]+$/i,\r\n        'cs-CZ': /^[0-9A-ZÁČĎÉĚÍŇÓŘŠŤÚŮÝŽ]+$/i,\r\n        'de-DE': /^[0-9A-ZÄÖÜß]+$/i,\r\n        'es-ES': /^[0-9A-ZÁÉÍÑÓÚÜ]+$/i,\r\n        'fr-FR': /^[0-9A-ZÀÂÆÇÉÈÊËÏÎÔŒÙÛÜŸ]+$/i,\r\n        'nl-NL': /^[0-9A-ZÉËÏÓÖÜ]+$/i,\r\n        'pl-PL': /^[0-9A-ZĄĆĘŚŁŃÓŻŹ]+$/i,\r\n        'pt-PT': /^[0-9A-ZÃÁÀÂÇÉÊÍÕÓÔÚÜ]+$/i,\r\n        'ru-RU': /^[0-9А-ЯЁа-яё]+$/i,\r\n        'tr-TR': /^[0-9A-ZÇĞİıÖŞÜ]+$/i,\r\n        ar: /^[٠١٢٣٤٥٦٧٨٩0-9ءآأؤإئابةتثجحخدذرزسشصضطظعغفقكلمنهوىيًٌٍَُِّْٰ]+$/\r\n      };\r\n\r\n      var englishLocales = ['AU', 'GB', 'HK', 'IN', 'NZ', 'ZA', 'ZM'];\r\n\r\n      for (var locale, i = 0; i < englishLocales.length; i++) {\r\n        locale = 'en-' + englishLocales[i];\r\n        alpha[locale] = alpha['en-US'];\r\n        alphanumeric[locale] = alphanumeric['en-US'];\r\n      }\r\n\r\n      // Source: http://www.localeplanet.com/java/\r\n      var arabicLocales = ['AE', 'BH', 'DZ', 'EG', 'IQ', 'JO', 'KW', 'LB', 'LY', 'MA', 'QM', 'QA', 'SA', 'SD', 'SY', 'TN', 'YE'];\r\n\r\n      for (var _locale, _i = 0; _i < arabicLocales.length; _i++) {\r\n        _locale = 'ar-' + arabicLocales[_i];\r\n        alpha[_locale] = alpha.ar;\r\n        alphanumeric[_locale] = alphanumeric.ar;\r\n      }\r\n\r\n      function isAlpha(str) {\r\n        var locale = arguments.length <= 1 || arguments[1] === undefined ? 'en-US' : arguments[1];\r\n\r\n        assertString(str);\r\n        if (locale in alpha) {\r\n          return alpha[locale].test(str);\r\n        }\r\n        throw new Error('Invalid locale \\'' + locale + '\\'');\r\n      }\r\n\r\n      function isAlphanumeric(str) {\r\n        var locale = arguments.length <= 1 || arguments[1] === undefined ? 'en-US' : arguments[1];\r\n\r\n        assertString(str);\r\n        if (locale in alphanumeric) {\r\n          return alphanumeric[locale].test(str);\r\n        }\r\n        throw new Error('Invalid locale \\'' + locale + '\\'');\r\n      }\r\n\r\n      var numeric = /^[-+]?[0-9]+$/;\r\n\r\n      function isNumeric(str) {\r\n        assertString(str);\r\n        return numeric.test(str);\r\n      }\r\n\r\n      function isLowercase(str) {\r\n        assertString(str);\r\n        return str === str.toLowerCase();\r\n      }\r\n\r\n      function isUppercase(str) {\r\n        assertString(str);\r\n        return str === str.toUpperCase();\r\n      }\r\n\r\n      var ascii = /^[\\x00-\\x7F]+$/;\r\n\r\n      function isAscii(str) {\r\n        assertString(str);\r\n        return ascii.test(str);\r\n      }\r\n\r\n      var fullWidth = /[^\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\r\n\r\n      function isFullWidth(str) {\r\n        assertString(str);\r\n        return fullWidth.test(str);\r\n      }\r\n\r\n      var halfWidth = /[\\u0020-\\u007E\\uFF61-\\uFF9F\\uFFA0-\\uFFDC\\uFFE8-\\uFFEE0-9a-zA-Z]/;\r\n\r\n      function isHalfWidth(str) {\r\n        assertString(str);\r\n        return halfWidth.test(str);\r\n      }\r\n\r\n      function isVariableWidth(str) {\r\n        assertString(str);\r\n        return fullWidth.test(str) && halfWidth.test(str);\r\n      }\r\n\r\n      var multibyte = /[^\\x00-\\x7F]/;\r\n\r\n      function isMultibyte(str) {\r\n        assertString(str);\r\n        return multibyte.test(str);\r\n      }\r\n\r\n      var surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/;\r\n\r\n      function isSurrogatePair(str) {\r\n        assertString(str);\r\n        return surrogatePair.test(str);\r\n      }\r\n\r\n      var int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\r\n\r\n      function isInt(str, options) {\r\n        assertString(str);\r\n        options = options || {};\r\n        return int.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max);\r\n      }\r\n\r\n      var float = /^(?:[-+]?(?:[0-9]+))?(?:\\.[0-9]*)?(?:[eE][\\+\\-]?(?:[0-9]+))?$/;\r\n\r\n      function isFloat(str, options) {\r\n        assertString(str);\r\n        options = options || {};\r\n        if (str === '' || str === '.') {\r\n          return false;\r\n        }\r\n        return float.test(str) && (!options.hasOwnProperty('min') || str >= options.min) && (!options.hasOwnProperty('max') || str <= options.max);\r\n      }\r\n\r\n      var decimal = /^[-+]?([0-9]+|\\.[0-9]+|[0-9]+\\.[0-9]+)$/;\r\n\r\n      function isDecimal(str) {\r\n        assertString(str);\r\n        return str !== '' && decimal.test(str);\r\n      }\r\n\r\n      var hexadecimal = /^[0-9A-F]+$/i;\r\n\r\n      function isHexadecimal(str) {\r\n        assertString(str);\r\n        return hexadecimal.test(str);\r\n      }\r\n\r\n      function isDivisibleBy(str, num) {\r\n        assertString(str);\r\n        return toFloat(str) % parseInt(num, 10) === 0;\r\n      }\r\n\r\n      var hexcolor = /^#?([0-9A-F]{3}|[0-9A-F]{6})$/i;\r\n\r\n      function isHexColor(str) {\r\n        assertString(str);\r\n        return hexcolor.test(str);\r\n      }\r\n\r\n      function isJSON(str) {\r\n        assertString(str);\r\n        try {\r\n          var obj = JSON.parse(str);\r\n          return !!obj && (typeof obj === 'undefined' ? 'undefined' : babelHelpers.typeof(obj)) === 'object';\r\n        } catch (e) {/* ignore */}\r\n        return false;\r\n      }\r\n\r\n      function isNull(str) {\r\n        assertString(str);\r\n        return str.length === 0;\r\n      }\r\n\r\n      /* eslint-disable prefer-rest-params */\r\n      function isLength(str, options) {\r\n        assertString(str);\r\n        var min = void 0;\r\n        var max = void 0;\r\n        if ((typeof options === 'undefined' ? 'undefined' : babelHelpers.typeof(options)) === 'object') {\r\n          min = options.min || 0;\r\n          max = options.max;\r\n        } else {\r\n          // backwards compatibility: isLength(str, min [, max])\r\n          min = arguments[1];\r\n          max = arguments[2];\r\n        }\r\n        var surrogatePairs = str.match(/[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g) || [];\r\n        var len = str.length - surrogatePairs.length;\r\n        return len >= min && (typeof max === 'undefined' || len <= max);\r\n      }\r\n\r\n      var uuid = {\r\n        3: /^[0-9A-F]{8}-[0-9A-F]{4}-3[0-9A-F]{3}-[0-9A-F]{4}-[0-9A-F]{12}$/i,\r\n        4: /^[0-9A-F]{8}-[0-9A-F]{4}-4[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n        5: /^[0-9A-F]{8}-[0-9A-F]{4}-5[0-9A-F]{3}-[89AB][0-9A-F]{3}-[0-9A-F]{12}$/i,\r\n        all: /^[0-9A-F]{8}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{12}$/i\r\n      };\r\n\r\n      function isUUID(str) {\r\n        var version = arguments.length <= 1 || arguments[1] === undefined ? 'all' : arguments[1];\r\n\r\n        assertString(str);\r\n        var pattern = uuid[version];\r\n        return pattern && pattern.test(str);\r\n      }\r\n\r\n      function isMongoId(str) {\r\n        assertString(str);\r\n        return isHexadecimal(str) && str.length === 24;\r\n      }\r\n\r\n      /* eslint-disable max-len */\r\n      // from http://goo.gl/0ejHHW\r\n      var iso8601 = /^([\\+-]?\\d{4}(?!\\d{2}\\b))((-?)((0[1-9]|1[0-2])(\\3([12]\\d|0[1-9]|3[01]))?|W([0-4]\\d|5[0-2])(-?[1-7])?|(00[1-9]|0[1-9]\\d|[12]\\d{2}|3([0-5]\\d|6[1-6])))([T\\s]((([01]\\d|2[0-3])((:?)[0-5]\\d)?|24\\:?00)([\\.,]\\d+(?!:))?)?(\\17[0-5]\\d([\\.,]\\d+)?)?([zZ]|([\\+-])([01]\\d|2[0-3]):?([0-5]\\d)?)?)?)?$/;\r\n      /* eslint-enable max-len */\r\n\r\n      function isISO8601 (str) {\r\n        assertString(str);\r\n        return iso8601.test(str);\r\n      }\r\n\r\n      function getTimezoneOffset(str) {\r\n        var iso8601Parts = str.match(iso8601);\r\n        var timezone = void 0,\r\n            sign = void 0,\r\n            hours = void 0,\r\n            minutes = void 0;\r\n        if (!iso8601Parts) {\r\n          str = str.toLowerCase();\r\n          timezone = str.match(/(?:\\s|gmt\\s*)(-|\\+)(\\d{1,4})(\\s|$)/);\r\n          if (!timezone) {\r\n            return str.indexOf('gmt') !== -1 ? 0 : null;\r\n          }\r\n          sign = timezone[1];\r\n          var offset = timezone[2];\r\n          if (offset.length === 3) {\r\n            offset = '0' + offset;\r\n          }\r\n          if (offset.length <= 2) {\r\n            hours = 0;\r\n            minutes = parseInt(offset, 10);\r\n          } else {\r\n            hours = parseInt(offset.slice(0, 2), 10);\r\n            minutes = parseInt(offset.slice(2, 4), 10);\r\n          }\r\n        } else {\r\n          timezone = iso8601Parts[21];\r\n          if (!timezone) {\r\n            // if no hour/minute was provided, the date is GMT\r\n            return !iso8601Parts[12] ? 0 : null;\r\n          }\r\n          if (timezone === 'z' || timezone === 'Z') {\r\n            return 0;\r\n          }\r\n          sign = iso8601Parts[22];\r\n          if (timezone.indexOf(':') !== -1) {\r\n            hours = parseInt(iso8601Parts[23], 10);\r\n            minutes = parseInt(iso8601Parts[24], 10);\r\n          } else {\r\n            hours = 0;\r\n            minutes = parseInt(iso8601Parts[23], 10);\r\n          }\r\n        }\r\n        return (hours * 60 + minutes) * (sign === '-' ? 1 : -1);\r\n      }\r\n\r\n      function isDate(str) {\r\n        assertString(str);\r\n        var normalizedDate = new Date(Date.parse(str));\r\n        if (isNaN(normalizedDate)) {\r\n          return false;\r\n        }\r\n\r\n        // normalizedDate is in the user's timezone. Apply the input\r\n        // timezone offset to the date so that the year and day match\r\n        // the input\r\n        var timezoneOffset = getTimezoneOffset(str);\r\n        if (timezoneOffset !== null) {\r\n          var timezoneDifference = normalizedDate.getTimezoneOffset() - timezoneOffset;\r\n          normalizedDate = new Date(normalizedDate.getTime() + 60000 * timezoneDifference);\r\n        }\r\n\r\n        var day = String(normalizedDate.getDate());\r\n        var dayOrYear = void 0,\r\n            dayOrYearMatches = void 0,\r\n            year = void 0;\r\n        // check for valid double digits that could be late days\r\n        // check for all matches since a string like '12/23' is a valid date\r\n        // ignore everything with nearby colons\r\n        dayOrYearMatches = str.match(/(^|[^:\\d])[23]\\d([^:\\d]|$)/g);\r\n        if (!dayOrYearMatches) {\r\n          return true;\r\n        }\r\n        dayOrYear = dayOrYearMatches.map(function (digitString) {\r\n          return digitString.match(/\\d+/g)[0];\r\n        }).join('/');\r\n\r\n        year = String(normalizedDate.getFullYear()).slice(-2);\r\n        if (dayOrYear === day || dayOrYear === year) {\r\n          return true;\r\n        } else if (dayOrYear === '' + day / year || dayOrYear === '' + year / day) {\r\n          return true;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      function isAfter(str) {\r\n        var date = arguments.length <= 1 || arguments[1] === undefined ? String(new Date()) : arguments[1];\r\n\r\n        assertString(str);\r\n        var comparison = toDate(date);\r\n        var original = toDate(str);\r\n        return !!(original && comparison && original > comparison);\r\n      }\r\n\r\n      function isBefore(str) {\r\n        var date = arguments.length <= 1 || arguments[1] === undefined ? String(new Date()) : arguments[1];\r\n\r\n        assertString(str);\r\n        var comparison = toDate(date);\r\n        var original = toDate(str);\r\n        return !!(original && comparison && original < comparison);\r\n      }\r\n\r\n      function isIn(str, options) {\r\n        assertString(str);\r\n        var i = void 0;\r\n        if (Object.prototype.toString.call(options) === '[object Array]') {\r\n          var array = [];\r\n          for (i in options) {\r\n            if ({}.hasOwnProperty.call(options, i)) {\r\n              array[i] = toString(options[i]);\r\n            }\r\n          }\r\n          return array.indexOf(str) >= 0;\r\n        } else if ((typeof options === 'undefined' ? 'undefined' : babelHelpers.typeof(options)) === 'object') {\r\n          return options.hasOwnProperty(str);\r\n        } else if (options && typeof options.indexOf === 'function') {\r\n          return options.indexOf(str) >= 0;\r\n        }\r\n        return false;\r\n      }\r\n\r\n      /* eslint-disable max-len */\r\n      var creditCard = /^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$/;\r\n      /* eslint-enable max-len */\r\n\r\n      function isCreditCard(str) {\r\n        assertString(str);\r\n        var sanitized = str.replace(/[^0-9]+/g, '');\r\n        if (!creditCard.test(sanitized)) {\r\n          return false;\r\n        }\r\n        var sum = 0;\r\n        var digit = void 0;\r\n        var tmpNum = void 0;\r\n        var shouldDouble = void 0;\r\n        for (var i = sanitized.length - 1; i >= 0; i--) {\r\n          digit = sanitized.substring(i, i + 1);\r\n          tmpNum = parseInt(digit, 10);\r\n          if (shouldDouble) {\r\n            tmpNum *= 2;\r\n            if (tmpNum >= 10) {\r\n              sum += tmpNum % 10 + 1;\r\n            } else {\r\n              sum += tmpNum;\r\n            }\r\n          } else {\r\n            sum += tmpNum;\r\n          }\r\n          shouldDouble = !shouldDouble;\r\n        }\r\n        return !!(sum % 10 === 0 ? sanitized : false);\r\n      }\r\n\r\n      var isin = /^[A-Z]{2}[0-9A-Z]{9}[0-9]$/;\r\n\r\n      function isISIN(str) {\r\n        assertString(str);\r\n        if (!isin.test(str)) {\r\n          return false;\r\n        }\r\n\r\n        var checksumStr = str.replace(/[A-Z]/g, function (character) {\r\n          return parseInt(character, 36);\r\n        });\r\n\r\n        var sum = 0;\r\n        var digit = void 0;\r\n        var tmpNum = void 0;\r\n        var shouldDouble = true;\r\n        for (var i = checksumStr.length - 2; i >= 0; i--) {\r\n          digit = checksumStr.substring(i, i + 1);\r\n          tmpNum = parseInt(digit, 10);\r\n          if (shouldDouble) {\r\n            tmpNum *= 2;\r\n            if (tmpNum >= 10) {\r\n              sum += tmpNum + 1;\r\n            } else {\r\n              sum += tmpNum;\r\n            }\r\n          } else {\r\n            sum += tmpNum;\r\n          }\r\n          shouldDouble = !shouldDouble;\r\n        }\r\n\r\n        return parseInt(str.substr(str.length - 1), 10) === (10000 - sum) % 10;\r\n      }\r\n\r\n      var isbn10Maybe = /^(?:[0-9]{9}X|[0-9]{10})$/;\r\n      var isbn13Maybe = /^(?:[0-9]{13})$/;\r\n      var factor = [1, 3];\r\n\r\n      function isISBN(str) {\r\n        var version = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];\r\n\r\n        assertString(str);\r\n        version = String(version);\r\n        if (!version) {\r\n          return isISBN(str, 10) || isISBN(str, 13);\r\n        }\r\n        var sanitized = str.replace(/[\\s-]+/g, '');\r\n        var checksum = 0;\r\n        var i = void 0;\r\n        if (version === '10') {\r\n          if (!isbn10Maybe.test(sanitized)) {\r\n            return false;\r\n          }\r\n          for (i = 0; i < 9; i++) {\r\n            checksum += (i + 1) * sanitized.charAt(i);\r\n          }\r\n          if (sanitized.charAt(9) === 'X') {\r\n            checksum += 10 * 10;\r\n          } else {\r\n            checksum += 10 * sanitized.charAt(9);\r\n          }\r\n          if (checksum % 11 === 0) {\r\n            return !!sanitized;\r\n          }\r\n        } else if (version === '13') {\r\n          if (!isbn13Maybe.test(sanitized)) {\r\n            return false;\r\n          }\r\n          for (i = 0; i < 12; i++) {\r\n            checksum += factor[i % 2] * sanitized.charAt(i);\r\n          }\r\n          if (sanitized.charAt(12) - (10 - checksum % 10) % 10 === 0) {\r\n            return !!sanitized;\r\n          }\r\n        }\r\n        return false;\r\n      }\r\n\r\n      /* eslint-disable max-len */\r\n      var phones = {\r\n        'ar-SY': /^(!?(\\+?963)|0)?9\\d{8}$/,\r\n        'en-US': /^(\\+?1)?[2-9]\\d{2}[2-9](?!11)\\d{6}$/,\r\n        'cs-CZ': /^(\\+?420)? ?[1-9][0-9]{2} ?[0-9]{3} ?[0-9]{3}$/,\r\n        'de-DE': /^(\\+?49[ \\.\\-])?([\\(]{1}[0-9]{1,6}[\\)])?([0-9 \\.\\-\\/]{3,20})((x|ext|extension)[ ]?[0-9]{1,4})?$/,\r\n        'el-GR': /^(\\+?30)?(69\\d{8})$/,\r\n        'en-AU': /^(\\+?61|0)4\\d{8}$/,\r\n        'en-GB': /^(\\+?44|0)7\\d{9}$/,\r\n        'en-HK': /^(\\+?852\\-?)?[569]\\d{3}\\-?\\d{4}$/,\r\n        'en-IN': /^(\\+?91|0)?[789]\\d{9}$/,\r\n        'en-NZ': /^(\\+?64|0)2\\d{7,9}$/,\r\n        'en-ZA': /^(\\+?27|0)\\d{9}$/,\r\n        'en-ZM': /^(\\+?26)?09[567]\\d{7}$/,\r\n        'es-ES': /^(\\+?34)?(6\\d{1}|7[1234])\\d{7}$/,\r\n        'fi-FI': /^(\\+?358|0)\\s?(4(0|1|2|4|5)?|50)\\s?(\\d\\s?){4,8}\\d$/,\r\n        'fr-FR': /^(\\+?33|0)[67]\\d{8}$/,\r\n        'ms-MY': /^(\\+?6?01){1}(([145]{1}(\\-|\\s)?\\d{7,8})|([236789]{1}(\\s|\\-)?\\d{7}))$/,\r\n        'nb-NO': /^(\\+?47)?[49]\\d{7}$/,\r\n        'nn-NO': /^(\\+?47)?[49]\\d{7}$/,\r\n        'pt-BR': /^(\\+?55|0)\\-?[1-9]{2}\\-?[2-9]{1}\\d{3,4}\\-?\\d{4}$/,\r\n        'pt-PT': /^(\\+?351)?9[1236]\\d{7}$/,\r\n        'ru-RU': /^(\\+?7|8)?9\\d{9}$/,\r\n        'tr-TR': /^(\\+?90|0)?5\\d{9}$/,\r\n        'vi-VN': /^(\\+?84|0)?((1(2([0-9])|6([2-9])|88|99))|(9((?!5)[0-9])))([0-9]{7})$/,\r\n        'zh-CN': /^(\\+?0?86\\-?)?((13\\d|14[57]|15[^4,\\D]|17[678]|18\\d)\\d{8}|170[059]\\d{7})$/,\r\n        'zh-TW': /^(\\+?886\\-?|0)?9\\d{8}$/\r\n      };\r\n      /* eslint-enable max-len */\r\n\r\n      function isMobilePhone(str, locale) {\r\n        assertString(str);\r\n        if (locale in phones) {\r\n          return phones[locale].test(str);\r\n        }\r\n        return false;\r\n      }\r\n\r\n      function currencyRegex(options) {\r\n        var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\r\n            negative = '-?',\r\n            whole_dollar_amount_without_sep = '[1-9]\\\\d*',\r\n            whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\r\n            valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\r\n            whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\r\n            decimal_amount = '(\\\\' + options.decimal_separator + '\\\\d{2})?';\r\n        var pattern = whole_dollar_amount + decimal_amount;\r\n\r\n        // default is negative sign before symbol, but there are two other options (besides parens)\r\n        if (options.allow_negatives && !options.parens_for_negatives) {\r\n          if (options.negative_sign_after_digits) {\r\n            pattern += negative;\r\n          } else if (options.negative_sign_before_digits) {\r\n            pattern = negative + pattern;\r\n          }\r\n        }\r\n\r\n        // South African Rand, for example, uses R 123 (space) and R-123 (no space)\r\n        if (options.allow_negative_sign_placeholder) {\r\n          pattern = '( (?!\\\\-))?' + pattern;\r\n        } else if (options.allow_space_after_symbol) {\r\n          pattern = ' ?' + pattern;\r\n        } else if (options.allow_space_after_digits) {\r\n          pattern += '( (?!$))?';\r\n        }\r\n\r\n        if (options.symbol_after_digits) {\r\n          pattern += symbol;\r\n        } else {\r\n          pattern = symbol + pattern;\r\n        }\r\n\r\n        if (options.allow_negatives) {\r\n          if (options.parens_for_negatives) {\r\n            pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\r\n          } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\r\n            pattern = negative + pattern;\r\n          }\r\n        }\r\n\r\n        /* eslint-disable prefer-template */\r\n        return new RegExp('^' +\r\n        // ensure there's a dollar and/or decimal amount, and that\r\n        // it doesn't start with a space or a negative sign followed by a space\r\n        '(?!-? )(?=.*\\\\d)' + pattern + '$');\r\n        /* eslint-enable prefer-template */\r\n      }\r\n\r\n      var default_currency_options = {\r\n        symbol: '$',\r\n        require_symbol: false,\r\n        allow_space_after_symbol: false,\r\n        symbol_after_digits: false,\r\n        allow_negatives: true,\r\n        parens_for_negatives: false,\r\n        negative_sign_before_digits: false,\r\n        negative_sign_after_digits: false,\r\n        allow_negative_sign_placeholder: false,\r\n        thousands_separator: ',',\r\n        decimal_separator: '.',\r\n        allow_space_after_digits: false\r\n      };\r\n\r\n      function isCurrency(str, options) {\r\n        assertString(str);\r\n        options = merge(options, default_currency_options);\r\n        return currencyRegex(options).test(str);\r\n      }\r\n\r\n      var notBase64 = /[^A-Z0-9+\\/=]/i;\r\n\r\n      function isBase64(str) {\r\n        assertString(str);\r\n        var len = str.length;\r\n        if (!len || len % 4 !== 0 || notBase64.test(str)) {\r\n          return false;\r\n        }\r\n        var firstPaddingChar = str.indexOf('=');\r\n        return firstPaddingChar === -1 || firstPaddingChar === len - 1 || firstPaddingChar === len - 2 && str[len - 1] === '=';\r\n      }\r\n\r\n      var dataURI = /^\\s*data:([a-z]+\\/[a-z0-9\\-\\+]+(;[a-z\\-]+\\=[a-z0-9\\-]+)?)?(;base64)?,[a-z0-9\\!\\$\\&\\'\\,\\(\\)\\*\\+\\,\\;\\=\\-\\.\\_\\~\\:\\@\\/\\?\\%\\s]*\\s*$/i; // eslint-disable-line max-len\r\n\r\n      function isDataURI(str) {\r\n        assertString(str);\r\n        return dataURI.test(str);\r\n      }\r\n\r\n      function ltrim(str, chars) {\r\n        assertString(str);\r\n        var pattern = chars ? new RegExp('^[' + chars + ']+', 'g') : /^\\s+/g;\r\n        return str.replace(pattern, '');\r\n      }\r\n\r\n      function rtrim(str, chars) {\r\n        assertString(str);\r\n        var pattern = chars ? new RegExp('[' + chars + ']+$', 'g') : /\\s+$/g;\r\n        return str.replace(pattern, '');\r\n      }\r\n\r\n      function trim(str, chars) {\r\n        assertString(str);\r\n        var pattern = chars ? new RegExp('^[' + chars + ']+|[' + chars + ']+$', 'g') : /^\\s+|\\s+$/g;\r\n        return str.replace(pattern, '');\r\n      }\r\n\r\n      function escape(str) {\r\n            assertString(str);\r\n            return str.replace(/&/g, '&amp;').replace(/\"/g, '&quot;').replace(/'/g, '&#x27;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\\//g, '&#x2F;').replace(/\\`/g, '&#96;');\r\n      }\r\n\r\n      function unescape(str) {\r\n            assertString(str);\r\n            return str.replace(/&amp;/g, '&').replace(/&quot;/g, '\"').replace(/&#x27;/g, \"'\").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&#x2F;/g, '\\/').replace(/&#96;/g, '\\`');\r\n      }\r\n\r\n      function blacklist(str, chars) {\r\n        assertString(str);\r\n        return str.replace(new RegExp('[' + chars + ']+', 'g'), '');\r\n      }\r\n\r\n      function stripLow(str, keep_new_lines) {\r\n        assertString(str);\r\n        var chars = keep_new_lines ? '\\\\x00-\\\\x09\\\\x0B\\\\x0C\\\\x0E-\\\\x1F\\\\x7F' : '\\\\x00-\\\\x1F\\\\x7F';\r\n        return blacklist(str, chars);\r\n      }\r\n\r\n      function whitelist(str, chars) {\r\n        assertString(str);\r\n        return str.replace(new RegExp('[^' + chars + ']+', 'g'), '');\r\n      }\r\n\r\n      function isWhitelisted(str, chars) {\r\n        assertString(str);\r\n        for (var i = str.length - 1; i >= 0; i--) {\r\n          if (chars.indexOf(str[i]) === -1) {\r\n            return false;\r\n          }\r\n        }\r\n        return true;\r\n      }\r\n\r\n      var default_normalize_email_options = {\r\n        lowercase: true,\r\n        remove_dots: true,\r\n        remove_extension: true\r\n      };\r\n\r\n      function normalizeEmail(email, options) {\r\n        options = merge(options, default_normalize_email_options);\r\n        if (!isEmail(email)) {\r\n          return false;\r\n        }\r\n        var parts = email.split('@', 2);\r\n        parts[1] = parts[1].toLowerCase();\r\n        if (parts[1] === 'gmail.com' || parts[1] === 'googlemail.com') {\r\n          if (options.remove_extension) {\r\n            parts[0] = parts[0].split('+')[0];\r\n          }\r\n          if (options.remove_dots) {\r\n            parts[0] = parts[0].replace(/\\./g, '');\r\n          }\r\n          if (!parts[0].length) {\r\n            return false;\r\n          }\r\n          parts[0] = parts[0].toLowerCase();\r\n          parts[1] = 'gmail.com';\r\n        } else if (options.lowercase) {\r\n          parts[0] = parts[0].toLowerCase();\r\n        }\r\n        return parts.join('@');\r\n      }\r\n\r\n      var version = '5.2.0';\r\n\r\n      var validator = {\r\n        version: version,\r\n        toDate: toDate,\r\n        toFloat: toFloat, toInt: toInt,\r\n        toBoolean: toBoolean,\r\n        equals: equals, contains: contains, matches: matches,\r\n        isEmail: isEmail, isURL: isURL, isMACAddress: isMACAddress, isIP: isIP, isFQDN: isFDQN,\r\n        isBoolean: isBoolean,\r\n        isAlpha: isAlpha, isAlphanumeric: isAlphanumeric, isNumeric: isNumeric, isLowercase: isLowercase, isUppercase: isUppercase,\r\n        isAscii: isAscii, isFullWidth: isFullWidth, isHalfWidth: isHalfWidth, isVariableWidth: isVariableWidth,\r\n        isMultibyte: isMultibyte, isSurrogatePair: isSurrogatePair,\r\n        isInt: isInt, isFloat: isFloat, isDecimal: isDecimal, isHexadecimal: isHexadecimal, isDivisibleBy: isDivisibleBy,\r\n        isHexColor: isHexColor,\r\n        isJSON: isJSON,\r\n        isNull: isNull,\r\n        isLength: isLength, isByteLength: isByteLength,\r\n        isUUID: isUUID, isMongoId: isMongoId,\r\n        isDate: isDate, isAfter: isAfter, isBefore: isBefore,\r\n        isIn: isIn,\r\n        isCreditCard: isCreditCard,\r\n        isISIN: isISIN, isISBN: isISBN,\r\n        isMobilePhone: isMobilePhone,\r\n        isCurrency: isCurrency,\r\n        isISO8601: isISO8601,\r\n        isBase64: isBase64, isDataURI: isDataURI,\r\n        ltrim: ltrim, rtrim: rtrim, trim: trim,\r\n        escape: escape, unescape: unescape, stripLow: stripLow,\r\n        whitelist: whitelist, blacklist: blacklist,\r\n        isWhitelisted: isWhitelisted,\r\n        normalizeEmail: normalizeEmail,\r\n        toString: toString\r\n      };\r\n\r\n      return validator;\r\n\r\n}));\nvalidator.isLoginId = function(input) {\r\n    var re = /^[a-zA-Z]+[a-zA-Z0-9_\\-\\.]*$/;\r\n    return re.test(input);\r\n}\r\nvalidator.isPassword = function(input) {\r\n    var re = /^[a-zA-Z0-9_\\-@]+$/;\r\n    return re.test(input);\r\n}"],"sourceRoot":"/source/"}